import streamlit as st
import graphviz
import pandas as pd
import numpy as np

# ------------------------------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
# ------------------------------------------------
st.set_page_config(page_title="–ú–µ—Ç–æ–¥ –°–∞–∞—Ç—ñ", layout="wide")
st.title("–ú–µ—Ç–æ–¥ –°–∞–∞—Ç—ñ ‚Äî –Ü—î—Ä–∞—Ä—Ö—ñ—è –∑–∞–¥–∞—á—ñ")

# ------------------------------------------------
# –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ —ñ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
# ------------------------------------------------
if "num_criteria" not in st.session_state:
    st.session_state.num_criteria = 3
if "num_alternatives" not in st.session_state:
    st.session_state.num_alternatives = 3

num_criteria = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤:", 1, 9, st.session_state.num_criteria)
num_alternatives = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤:", 1, 9, st.session_state.num_alternatives)
st.session_state.num_criteria = num_criteria
st.session_state.num_alternatives = num_alternatives

criteria_names = st.session_state.get("criteria_names", [f"–ö—Ä–∏—Ç–µ—Ä—ñ–π {i+1}" for i in range(num_criteria)])
alternative_names = st.session_state.get("alternative_names", [f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ {j+1}" for j in range(num_alternatives)])

criteria_names = (criteria_names + [f"–ö—Ä–∏—Ç–µ—Ä—ñ–π {i+1}" for i in range(len(criteria_names), num_criteria)])[:num_criteria]
alternative_names = (alternative_names + [f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ {j+1}" for j in range(len(alternative_names), num_alternatives)])[:num_alternatives]

st.session_state.criteria_names = criteria_names
st.session_state.alternative_names = alternative_names

# ------------------------------------------------
# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—É
# ------------------------------------------------
dot = graphviz.Digraph()
dot.attr(size="15,8", ratio="fill", rankdir="TB")
dot.node("Goal", "–ì–û–õ–û–í–ù–ê –ú–ï–¢–ê", shape="box", style="filled", color="lightblue")

for crit in criteria_names:
    dot.node(crit, crit, shape="box", style="filled", color="lightgreen")
    dot.edge("Goal", crit)
    for alt in alternative_names:
        dot.node(alt, alt, shape="box", style="filled", color="lightyellow")
        dot.edge(crit, alt)

st.graphviz_chart(dot, width=1500, height=700)

# ------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ
# ------------------------------------------------
def style_diagonal(df: pd.DataFrame):
    n = df.shape[0]
    styles = pd.DataFrame("", index=df.index, columns=df.columns)
    for i in range(n):
        styles.iloc[i, i] = "background-color: #dddddd; color: #333333; font-weight: 600;"
    return (
        df.style
        .format(precision=0)
        .apply(lambda _: styles, axis=None)
        .set_table_styles([{"selector": "th", "props": "font-weight: 600; text-align: center;"}])
    )

# ------------------------------------------------
# –ú–∞—Ç—Ä–∏—Ü—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤
# ------------------------------------------------
st.markdown("---")
st.markdown("## üìä –ú–∞—Ç—Ä–∏—Ü—è –ø–æ–ø–∞—Ä–Ω–∏—Ö –ø–æ—Ä—ñ–≤–Ω—è–Ω—å –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤")
st.info("‚ö†Ô∏è –î—ñ–∞–≥–æ–Ω–∞–ª—å –Ω–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ ‚Äî –≤–æ–Ω–∞ –∑–∞–≤–∂–¥–∏ –¥–æ—Ä—ñ–≤–Ω—é—î 1 (—Å—ñ—Ä—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏).")

if "criteria_matrix" not in st.session_state or len(st.session_state.criteria_matrix) != num_criteria:
    st.session_state.criteria_matrix = pd.DataFrame(
        np.ones((num_criteria, num_criteria)),
        columns=criteria_names,
        index=criteria_names
    )

prev_matrix = st.session_state.criteria_matrix.copy()
edited_matrix = st.session_state.criteria_matrix.copy()

# –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
edited = st.data_editor(
    edited_matrix,
    key="criteria_editor",
    use_container_width=True,
    num_rows="dynamic"
)

# --- –æ–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω, —Å–∏–º–µ—Ç—Ä—ñ—è, –¥—ñ–∞–≥–æ–Ω–∞–ª—å ---
for i in range(num_criteria):
    for j in range(num_criteria):
        val = edited.iloc[i, j]
        if i == j:
            # —Ñ—ñ–∫—Å—É—î–º–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—å
            if val != 1:
                edited.iloc[i, j] = 1.0
        elif edited.iloc[i, j] != prev_matrix.iloc[i, j]:
            if pd.notna(val) and val != 0:
                try:
                    edited.iloc[j, i] = round(1 / float(val))
                except Exception:
                    edited.iloc[j, i] = 1.0

np.fill_diagonal(edited.values, 1.0)
edited = edited.astype(float).round(0)
st.session_state.criteria_matrix = edited

# –≤–∏–≤—ñ–¥ –º–∞—Ç—Ä–∏—Ü—ñ (—Ç—ñ–ª—å–∫–∏ 1 —Ç–∞–±–ª–∏—Ü—è)
st.dataframe(style_diagonal(edited), use_container_width=True)

# ------------------------------------------------
# –ú–∞—Ç—Ä–∏—Ü—ñ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ (–æ–∫—Ä–µ–º—ñ –≤–∫–ª–∞–¥–∫–∏)
# ------------------------------------------------
st.markdown("---")
st.markdown("## üßÆ –ú–∞—Ç—Ä–∏—Ü—ñ –ø–æ–ø–∞—Ä–Ω–∏—Ö –ø–æ—Ä—ñ–≤–Ω—è–Ω—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤")

if "alt_matrices" not in st.session_state:
    st.session_state.alt_matrices = {}

# —Å—Ç–≤–æ—Ä—é—î–º–æ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä—ñ—é
tabs = st.tabs([f"{crit}" for crit in criteria_names])

for tab, crit in zip(tabs, criteria_names):
    with tab:
        st.markdown(f"### ‚öôÔ∏è –ú–∞—Ç—Ä–∏—Ü—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä—ñ—é: **{crit}**")

        if crit not in st.session_state.alt_matrices or len(st.session_state.alt_matrices[crit]) != num_alternatives:
            st.session_state.alt_matrices[crit] = pd.DataFrame(
                np.ones((num_alternatives, num_alternatives)),
                columns=alternative_names,
                index=alternative_names
            )

        prev_alt = st.session_state.alt_matrices[crit].copy()
        edited_alt = st.data_editor(
            prev_alt,
            key=f"matrix_{crit}",
            use_container_width=True,
            num_rows="dynamic"
        )

        for i in range(num_alternatives):
            for j in range(num_alternatives):
                val = edited_alt.iloc[i, j]
                if i == j:
                    if val != 1:
                        edited_alt.iloc[i, j] = 1.0
                elif edited_alt.iloc[i, j] != prev_alt.iloc[i, j]:
                    if pd.notna(val) and val != 0:
                        try:
                            edited_alt.iloc[j, i] = round(1 / float(val))
                        except Exception:
                            edited_alt.iloc[j, i] = 1.0

        np.fill_diagonal(edited_alt.values, 1.0)
        edited_alt = edited_alt.astype(float).round(0)
        st.session_state.alt_matrices[crit] = edited_alt

        st.dataframe(style_diagonal(edited_alt), use_container_width=True)

st.success("‚úÖ –£—Å—ñ –º–∞—Ç—Ä–∏—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ. –î—ñ–∞–≥–æ–Ω–∞–ª—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ = 1, —Å–∏–º–µ—Ç—Ä—ñ—è –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
