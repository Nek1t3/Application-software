import streamlit as st
import graphviz
import pandas as pd
import numpy as np

# ------------------------------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
# ------------------------------------------------
st.set_page_config(page_title="–ú–µ—Ç–æ–¥ –°–∞–∞—Ç—ñ", layout="wide")
st.title("–ú–µ—Ç–æ–¥ –°–∞–∞—Ç—ñ ‚Äî –Ü—î—Ä–∞—Ä—Ö—ñ—è –∑–∞–¥–∞—á—ñ")

# ------------------------------------------------
# –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ —ñ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
# ------------------------------------------------
if "num_criteria" not in st.session_state:
    st.session_state.num_criteria = 3
if "num_alternatives" not in st.session_state:
    st.session_state.num_alternatives = 3

num_criteria = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤:", 1, 9, st.session_state.num_criteria)
num_alternatives = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤:", 1, 9, st.session_state.num_alternatives)
st.session_state.num_criteria = num_criteria
st.session_state.num_alternatives = num_alternatives

criteria_names = st.session_state.get("criteria_names", [f"–ö—Ä–∏—Ç–µ—Ä—ñ–π {i+1}" for i in range(num_criteria)])
criteria_names = (criteria_names + [f"–ö—Ä–∏—Ç–µ—Ä—ñ–π {i+1}" for i in range(len(criteria_names), num_criteria)])[:num_criteria]
st.session_state.criteria_names = criteria_names

# ------------------------------------------------
# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—É
# ------------------------------------------------
dot = graphviz.Digraph()
dot.attr(size="15,8", ratio="fill", rankdir="TB")
dot.node("Goal", "–ì–û–õ–û–í–ù–ê –ú–ï–¢–ê", shape="box", style="filled", color="lightblue")

for crit in criteria_names:
    dot.node(crit, crit, shape="box", style="filled", color="lightgreen")
    dot.edge("Goal", crit)

st.graphviz_chart(dot, width=1500, height=500)

# ------------------------------------------------
# –ú–∞—Ç—Ä–∏—Ü—è –ø–æ–ø–∞—Ä–Ω–∏—Ö –ø–æ—Ä—ñ–≤–Ω—è–Ω—å –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤
# ------------------------------------------------
st.markdown("---")
st.markdown("## üìä –ú–∞—Ç—Ä–∏—Ü—è –ø–æ–ø–∞—Ä–Ω–∏—Ö –ø–æ—Ä—ñ–≤–Ω—è–Ω—å –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤")
st.info("‚ö†Ô∏è –î—ñ–∞–≥–æ–Ω–∞–ª—å –Ω–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ ‚Äî –≤–æ–Ω–∞ –∑–∞–≤–∂–¥–∏ –¥–æ—Ä—ñ–≤–Ω—é—î 1 (—Å—ñ—Ä—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏).")

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
if "criteria_matrix" not in st.session_state or len(st.session_state.criteria_matrix) != num_criteria:
    st.session_state.criteria_matrix = pd.DataFrame(
        np.ones((num_criteria, num_criteria)),
        columns=criteria_names,
        index=criteria_names
    )

prev_matrix = st.session_state.criteria_matrix.copy()

# —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
edited_matrix = st.data_editor(
    prev_matrix,
    key="criteria_editor",
    use_container_width=True,
    num_rows="dynamic"
)

# –ª–æ–≥—ñ–∫–∞ –¥–∑–µ—Ä–∫–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ
for i in range(num_criteria):
    for j in range(num_criteria):
        val = edited_matrix.iloc[i, j]

        # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –¥—ñ–∞–≥–æ–Ω–∞–ª—å
        if i == j:
            if val != 1:
                edited_matrix.iloc[i, j] = 1.0

        # —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∞—Å—å –Ω–µ-–¥—ñ–∞–≥–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Ä–∫–∞
        elif edited_matrix.iloc[i, j] != prev_matrix.iloc[i, j]:
            if pd.notna(val) and val != 0:
                try:
                    edited_matrix.iloc[j, i] = round(1 / float(val))
                except Exception:
                    edited_matrix.iloc[j, i] = 1.0

# –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ, —â–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—å = 1 —ñ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ —Ü—ñ–ª–∏—Ö
np.fill_diagonal(edited_matrix.values, 1.0)
edited_matrix = edited_matrix.astype(float).round(0)

st.session_state.criteria_matrix = edited_matrix

# ------------------------------------------------
# –í—ñ–∑—É–∞–ª—å–Ω–∞ –ø—ñ–¥—Å–≤—ñ—Ç–∫–∞ –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ
# ------------------------------------------------
def style_diagonal(df: pd.DataFrame):
    n = df.shape[0]
    styles = pd.DataFrame("", index=df.index, columns=df.columns)
    for i in range(n):
        styles.iloc[i, i] = "background-color: #dddddd; color: #333333; font-weight: 600;"
    return (
        df.style
        .format(precision=0)
        .apply(lambda _: styles, axis=None)
        .set_table_styles([{"selector": "th", "props": "font-weight: 600; text-align: center;"}])
    )

# –ø–æ–∫–∞–∑—É—î–º–æ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—é (–∑ –ø—ñ–¥—Å–≤—ñ—á–µ–Ω–æ—é –¥—ñ–∞–≥–æ–Ω–∞–ª–ª—é)
st.dataframe(style_diagonal(st.session_state.criteria_matrix), use_container_width=True)

st.success("‚úÖ –ì–æ—Ç–æ–≤–æ: –¥—ñ–∞–≥–æ–Ω–∞–ª—å —Å—ñ—Ä–æ–≥–æ –∫–æ–ª—å–æ—Ä—É, —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ = 1, —Å–∏–º–µ—Ç—Ä—ñ—è –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
