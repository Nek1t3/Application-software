import streamlit as st
import graphviz
import pandas as pd
import numpy as np

st.set_page_config(page_title="–ú–µ—Ç–æ–¥ –°–∞–∞—Ç—ñ", layout="wide")
st.title("–ú–µ—Ç–æ–¥ –°–∞–∞—Ç—ñ ‚Äî –Ü—î—Ä–∞—Ä—Ö—ñ—è –∑–∞–¥–∞—á—ñ")

# ============================================================
# === 1. –í–∏–±—ñ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ —ñ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ ============
# ============================================================

if "num_criteria" not in st.session_state:
    st.session_state.num_criteria = 3
if "num_alternatives" not in st.session_state:
    st.session_state.num_alternatives = 3

num_criteria = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤:", min_value=1, max_value=9, value=st.session_state.num_criteria)
num_alternatives = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤:", min_value=1, max_value=9, value=st.session_state.num_alternatives)

st.session_state.num_criteria = num_criteria
st.session_state.num_alternatives = num_alternatives

# ============================================================
# === 2. –Ü–º–µ–Ω–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ —ñ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ =======================
# ============================================================

criteria_names = st.session_state.get("criteria_names", [f"–ö—Ä–∏—Ç–µ—Ä—ñ–π {i+1}" for i in range(num_criteria)])
alternative_names = st.session_state.get("alternative_names", [f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ {j+1}" for j in range(num_alternatives)])
goal_name = st.session_state.get("goal_name", "–ì–û–õ–û–í–ù–ê –ú–ï–¢–ê")

criteria_names = (criteria_names + [f"–ö—Ä–∏—Ç–µ—Ä—ñ–π {i+1}" for i in range(len(criteria_names), num_criteria)])[:num_criteria]
alternative_names = (alternative_names + [f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ {j+1}" for j in range(len(alternative_names), num_alternatives)])[:num_alternatives]

st.session_state.criteria_names = criteria_names
st.session_state.alternative_names = alternative_names

# ============================================================
# === 3. –ü–æ–±—É–¥–æ–≤–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—ó ==================================
# ============================================================

dot = graphviz.Digraph()
dot.attr(size="15,8", ratio="fill", rankdir="TB")

dot.node("Goal", goal_name, shape="box", style="filled", color="lightblue")

criteria_nodes = []
for i, crit_name in enumerate(criteria_names):
    node_id = f"C{i+1}"
    dot.node(node_id, crit_name, shape="box", style="filled", color="lightgreen")
    dot.edge("Goal", node_id)
    criteria_nodes.append(node_id)

alt_nodes = []
for j, alt_name in enumerate(alternative_names):
    node_id = f"A{j+1}"
    dot.node(node_id, alt_name, shape="box", style="filled", color="lightyellow")
    alt_nodes.append(node_id)

for c in criteria_nodes:
    for a in alt_nodes:
        dot.edge(c, a)

st.graphviz_chart(dot, width=1500, height=800)
st.info("üí° –©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –∞–±–æ –≥–æ–ª–æ–≤–Ω–æ—ó –º–µ—Ç–∏ ‚Äî –≤—ñ–¥–∫—Ä–∏–π —Å—Ç–æ—Ä—ñ–Ω–∫—É **¬´–ù–∞–∑–≤–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤¬ª** —É –º–µ–Ω—é –ª—ñ–≤–æ—Ä—É—á.")

# ============================================================
# === 4. –ú–∞—Ç—Ä–∏—Ü—ñ –ø–æ–ø–∞—Ä–Ω–∏—Ö –ø–æ—Ä—ñ–≤–Ω—è–Ω—å ==========================
# ============================================================

st.markdown("---")
st.markdown("## üìä –ú–∞—Ç—Ä–∏—Ü—ñ –ø–æ–ø–∞—Ä–Ω–∏—Ö –ø–æ—Ä—ñ–≤–Ω—è–Ω—å")

# --- –ú–∞—Ç—Ä–∏—Ü—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ ---
if "criteria_matrix" not in st.session_state or len(st.session_state.criteria_matrix) != num_criteria:
    st.session_state.criteria_matrix = pd.DataFrame(
        np.ones((num_criteria, num_criteria)),
        columns=criteria_names,
        index=criteria_names
    )

st.markdown("### üß© –ú–∞—Ç—Ä–∏—Ü—è –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤")

# –∫–æ–ø—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–∑ –±–ª–æ–∫–æ–≤–∞–Ω–æ—é –¥—ñ–∞–≥–æ–Ω–∞–ª–ª—é)
display_matrix = st.session_state.criteria_matrix.copy()
for i in range(num_criteria):
    display_matrix.iloc[i, i] = "1 (—Ñ—ñ–∫—Å.)"

edited_matrix = st.data_editor(
    display_matrix,
    key="criteria_matrix_editor",
    use_container_width=True,
    num_rows="dynamic"
)

# üöÄ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–µ –¥–∑–µ—Ä–∫–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
prev_matrix = st.session_state.criteria_matrix.copy()
diff = (edited_matrix != display_matrix)
if diff.any().any():
    changed = np.where(diff)
    for i, j in zip(changed[0], changed[1]):
        # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—å
        if i == j:
            continue
        val = edited_matrix.iloc[i, j]
        if isinstance(val, str):  # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è —Ç–∏–ø—É "1 (—Ñ—ñ–∫—Å.)"
            continue
        if pd.notna(val) and val != 0:
            try:
                edited_matrix.iloc[j, i] = round(1 / float(val), 3)
            except Exception:
                edited_matrix.iloc[j, i] = 1.0

# –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —á–∏—Å–ª–æ–≤—É –º–∞—Ç—Ä–∏—Ü—é –±–µ–∑ —Ç–µ–∫—Å—Ç—É
new_matrix = pd.DataFrame(np.ones((num_criteria, num_criteria)), columns=criteria_names, index=criteria_names)
for i in range(num_criteria):
    for j in range(num_criteria):
        if i != j:
            val = edited_matrix.iloc[i, j]
            if isinstance(val, (int, float, np.float64)):
                new_matrix.iloc[i, j] = val
st.session_state.criteria_matrix = new_matrix

# ============================================================
# === 5. –ú–∞—Ç—Ä–∏—Ü—ñ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ =================================
# ============================================================

if "alt_matrices" not in st.session_state:
    st.session_state.alt_matrices = {}

for crit in criteria_names:
    if crit not in st.session_state.alt_matrices or len(st.session_state.alt_matrices[crit]) != num_alternatives:
        st.session_state.alt_matrices[crit] = pd.DataFrame(
            np.ones((num_alternatives, num_alternatives)),
            columns=alternative_names,
            index=alternative_names
        )

    with st.expander(f"‚öôÔ∏è –ú–∞—Ç—Ä–∏—Ü—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä—ñ—é: {crit}"):
        display_alt = st.session_state.alt_matrices[crit].copy()
        for i in range(num_alternatives):
            display_alt.iloc[i, i] = "1 (—Ñ—ñ–∫—Å.)"

        edited_alt = st.data_editor(
            display_alt,
            key=f"matrix_{crit}",
            use_container_width=True,
            num_rows="dynamic"
        )

        prev_alt = st.session_state.alt_matrices[crit].copy()
        diff_alt = (edited_alt != display_alt)
        if diff_alt.any().any():
            changed = np.where(diff_alt)
            for i, j in zip(changed[0], changed[1]):
                if i == j:
                    continue
                val = edited_alt.iloc[i, j]
                if isinstance(val, str):
                    continue
                if pd.notna(val) and val != 0:
                    try:
                        edited_alt.iloc[j, i] = round(1 / float(val), 3)
                    except Exception:
                        edited_alt.iloc[j, i] = 1.0

        new_alt = pd.DataFrame(np.ones((num_alternatives, num_alternatives)), columns=alternative_names, index=alternative_names)
        for i in range(num_alternatives):
            for j in range(num_alternatives):
                if i != j:
                    val = edited_alt.iloc[i, j]
                    if isinstance(val, (int, float, np.float64)):
                        new_alt.iloc[i, j] = val
        st.session_state.alt_matrices[crit] = new_alt

st.success("‚úÖ –ú–∞—Ç—Ä–∏—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ. –î—ñ–∞–≥–æ–Ω–∞–ª—å –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —ñ –Ω–µ —Ä–µ–¥–∞–≥—É—î—Ç—å—Å—è. –°–∏–º–µ—Ç—Ä—ñ—è –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")
